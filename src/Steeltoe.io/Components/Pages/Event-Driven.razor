@page "/event-driven"

<Banner BannerTypeName="Deprecation Notice" Href="https://github.com/SteeltoeOSS/Steeltoe/issues/1244">
    These components have been discontinued from Steeltoe v4. Please click here to read more and provide feedback.
</Banner>

<Template Name="Event Driven" Features="@_features" NameIsPlural="false" MetaDescription="Use Steeltoe Messaging and Stream components to build event-driven applications.">
    <Description>
        Event-driven systems reflect how modern businesses actually work, with thousands of small changes happening all day, every day.
        Steeltoe&apos;s ability to handle events and enable developers to build applications around them, means your apps will stay in sync with your business.
        Steeltoe has event-driven options like streaming all the way to cloud functions, and data flows.
    </Description>
    <WhatIs>
        When combined with microservices, event streaming opens up exciting opportunities - like event-driven architectures.
        Steeltoe simplifies the production, processing, and consumption of events, providing several useful abstractions
    </WhatIs>
    <WhyUse>
        The bedrock of any event-driven system is message handling.
        Connecting to message platforms, routing messages, transforming messages, processing messages.
        With Steeltoe you can solve these integration challenges quickly and easily.
    </WhyUse>
</Template>

@code
{
	private readonly Feature[] _features =
    [
		new()
        {
			Title = (MarkupString)"Steeltoe Messaging",
			Description = b => {
                b.AddMarkupContent(1,"With the Steeltoe Messaging project, you can apply core concepts to the development of RabbitMQ based messaging solutions.<br /><br />In just a few lines, implement high-level message handling abstraction and support message-driven POCOs with a \"listener container.\"<Br /><br />");
                b.OpenComponent<Href>(2);
                b.AddAttribute(3, "href","/messaging");
                b.AddAttribute(4, "AsButton",true);
                b.AddAttribute(5, "ChildContent", (RenderFragment)(child => { child.AddContent(6, "Learn more"); }));
                b.CloseComponent();
            },
			Img = "/images/Icon_device-exchange.svg"
		},
		new()
        {
			Title = (MarkupString)"Steeltoe Stream",
			Description = b => {
                b.AddMarkupContent(1,"Steeltoe Stream improves your productivity when working with RabbitMQ, providing three key abstractions to simplify your code. &quot;Binders&quot; integrate with external messaging systems. &quot;Bindings&quot; bridge the gap between the messaging systems and your code. &quot;Messages&quot; provide the structure that your code uses to send and receive data.<Br /><br />Steeltoe Stream also provides support for provisioning, content conversion, error handling, configuration management, consumer groups, partitioning, monitoring, and health checks.<Br /><br />");
                b.OpenComponent<Href>(2);
                b.AddAttribute(3, "href","/docs/stream");
                b.AddAttribute(4, "AsButton",true);
                b.AddAttribute(5, "ChildContent", (RenderFragment)(child => { child.AddContent(6, "Learn more"); }));
                b.CloseComponent();
            },
			Img = "/images/Icon_data-transfer.svg"
		}
    ];
}
